import Scene from "./core/Scene";
import SceneChild from "./core/SceneChild";
import Group from "./core/Group";
import Line from "./core/shapes/primitives/Line";
import Triangle from "./core/shapes/primitives/Triangle";
import Rect from "./core/shapes/primitives/Rect";
import RegularPolygon from "./core/shapes/primitives/RegularPolygon";
import Circle from "./core/shapes/primitives/Circle";
import Rose from "./core/shapes/primitives/Rose";
import Spiral from "./core/shapes/primitives/Spiral";
import Lissajous from "./core/shapes/primitives/Lissajous";
import Shape from "./core/shapes/Shape";
import ShapePrimitive from "./core/shapes/ShapePrimitive";
import ShapeLoop from "./core/shapes/ShapeLoop";
import ShapeBuffer from "./core/shapes/ShapeBuffer";
import { ShapePrimitiveAdaptMode } from "./core/interfaces/shapes/Interfaces";
import DrawerCanvas from "./services/drawer-canvas/DrawerCanvas";
import Renderer from "./services/renderer/Renderer";
import JSONImporter from "./services/importers/JSONImporter";
import JSONExporter from "./services/exporters/JSONExporter";
declare const Urpflanze: {
    ShapePrimitiveAdaptMode: typeof ShapePrimitiveAdaptMode;
    Context: {
        noise: (seed?: string, x?: number, y?: number, z?: number) => number;
        angle: (repetition: import("./core/types/ShapeBase").Repetition, offsetFromCenter?: number | number[] | Float32Array) => number;
        distance: (repetition: import("./core/types/ShapeBase").Repetition, offsetFromCenter?: number | number[] | Float32Array, scaleDistance?: number | number[] | Float32Array) => number;
        percW: (percentage: number, shape: import("./core/shapes/ShapeBase").default) => number;
        percH: (percentage: number, shape: import("./core/shapes/ShapeBase").default) => number;
    };
    Vec2: {
        create: (x?: number | number[] | Float32Array, y?: number | undefined) => number[] | Float32Array;
        distance: (a: number[] | Float32Array, b: number[] | Float32Array) => number;
        dot: (a: number[] | Float32Array, b: number[] | Float32Array) => number;
        length: (vec: number[] | Float32Array) => number;
        angle: (a: number[] | Float32Array, b: number[] | Float32Array) => number;
        squeezeX: (vec: number[] | Float32Array, m: number) => void;
        squeezeY: (vec: number[] | Float32Array, m: number) => void;
        skewX: (vec: number[] | Float32Array, m: number) => void;
        skewY: (vec: number[] | Float32Array, m: number) => void;
        rotateX: (vec: number[] | Float32Array, pointToRotate: number[] | Float32Array, rad: number) => void;
        rotateY: (vec: number[] | Float32Array, pointToRotate: number[] | Float32Array, rad: number) => void;
        rotateZ: (vec: number[] | Float32Array, pointToRotate: number[] | Float32Array, rad: number) => void;
        translate: (vec: number[] | Float32Array, to: number[] | Float32Array) => void;
        scale: (vec: number[] | Float32Array, to: number[] | Float32Array) => void;
        divide: (vec: number[] | Float32Array, to: number[] | Float32Array) => void;
        toString: (vec: number[] | Float32Array) => string;
        ZERO: number[];
        ONE: number[];
    };
    toDegrees: (radians: number) => number;
    toRadians: (degrees: number) => number;
    isDef: (object: any) => boolean;
    clamp: (min: number, max: number, value: number) => number;
    relativeClamp: (value: number, refMin: number, refMax: number, toMin: number, toMax: number) => number;
    Scene: typeof Scene;
    SceneChild: typeof SceneChild;
    Group: typeof Group;
    Line: typeof Line;
    Triangle: typeof Triangle;
    Rect: typeof Rect;
    RegularPolygon: typeof RegularPolygon;
    Circle: typeof Circle;
    Rose: typeof Rose;
    Lissajous: typeof Lissajous;
    Spiral: typeof Spiral;
    Shape: typeof Shape;
    ShapeBuffer: typeof ShapeBuffer;
    ShapeLoop: typeof ShapeLoop;
    ShapePrimitive: typeof ShapePrimitive;
    DrawerCanvas: typeof DrawerCanvas;
    Renderer: typeof Renderer;
    JSONImporter: typeof JSONImporter;
    JSONExporter: typeof JSONExporter;
};
export default Urpflanze;
