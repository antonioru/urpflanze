import Scene from "./Scene";
import SceneChild from "./SceneChild";
import Group from "./Group";
import Line from "./shapes/primitives/Line";
import Triangle from "./shapes/primitives/Triangle";
import Rect from "./shapes/primitives/Rect";
import RegularPolygon from "./shapes/primitives/RegularPolygon";
import Circle from "./shapes/primitives/Circle";
import Rose from "./shapes/primitives/Rose";
import Spiral from "./shapes/primitives/Spiral";
import Lissajous from "./shapes/primitives/Lissajous";
import Shape from "./shapes/Shape";
import ShapePrimitive from "./shapes/ShapePrimitive";
import ShapeLoop from "./shapes/ShapeLoop";
import ShapeBuffer from "./shapes/ShapeBuffer";
import { ShapePrimitiveAdaptMode } from "./interfaces/shapes/Interfaces";
declare const Urpflanze: {
    toDegrees: (radians: number) => number;
    toRadians: (degrees: number) => number;
    isDef: (object: any) => boolean;
    clamp: (min: number, max: number, value: number) => number;
    relativeClamp: (value: number, refMin: number, refMax: number, toMin: number, toMax: number) => number;
    Scene: typeof Scene;
    SceneChild: typeof SceneChild;
    Group: typeof Group;
    Line: typeof Line;
    Triangle: typeof Triangle;
    Rect: typeof Rect;
    RegularPolygon: typeof RegularPolygon;
    Circle: typeof Circle;
    Rose: typeof Rose;
    Lissajous: typeof Lissajous;
    Spiral: typeof Spiral;
    Shape: typeof Shape;
    ShapeBuffer: typeof ShapeBuffer;
    ShapeLoop: typeof ShapeLoop;
    ShapePrimitive: typeof ShapePrimitive;
    noise: (seed?: string, x?: number, y?: number, z?: number) => number;
    angle: (repetition: import("./types/ShapeBase").Repetition, offsetFromCenter?: number | number[] | Float32Array) => number;
    distance: (repetition: import("./types/ShapeBase").Repetition, offsetFromCenter?: number | number[] | Float32Array, scaleDistance?: number | number[] | Float32Array) => number;
    percW: (percentage: number, shape: import("./shapes/ShapeBase").default) => number;
    percH: (percentage: number, shape: import("./shapes/ShapeBase").default) => number;
    ShapePrimitiveAdaptMode: typeof ShapePrimitiveAdaptMode;
};
export default Urpflanze;
