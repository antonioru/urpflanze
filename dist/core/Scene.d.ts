import { ShapeBaseStreamArguments } from "./types/ShapeBase";
import SceneSettingsInterface from "./interfaces/SceneInterface";
import SceneChild from "./SceneChild";
import { TArray } from "./math/Vec2";
declare class Scene {
    width: number;
    height: number;
    center: TArray;
    background: string;
    mainColor: string;
    start_time: number;
    last_update_time: number;
    current_time: number;
    delta_time: number;
    fps: number;
    private children;
    constructor(settings?: SceneSettingsInterface);
    resize(width: number, height?: number): void;
    update(at_time?: number): void;
    clearAllBuffers(): void;
    draw(callback: (stream_arguments: ShapeBaseStreamArguments) => void): void;
    getChildren(): Array<SceneChild>;
    add(item: SceneChild, order?: number): void;
    sortChildren(): void;
    isFirstLevelChild(sceneChild: SceneChild): boolean;
    find(id_or_name: string | number): SceneChild | null;
    get(index: number): SceneChild | null;
    remove(index: number): void;
    clearChildren(): void;
    removeFromId(id: number | string): void;
    getParentsOfSceneChild(sceneChild: SceneChild): Array<SceneChild>;
    static getParentsOfSceneChild(current: Scene | SceneChild, sceneChild: SceneChild, parents?: Array<SceneChild | Scene>): Array<SceneChild | Scene> | null;
    static walk(callback: (sceneChild: SceneChild) => boolean | void, current: Scene | SceneChild): boolean | void;
    static propagateToChilden(child: SceneChild, scene: Scene): void;
}
export default Scene;
