export declare type TEasing = 'linear' | 'quadraticIn' | 'quadraticOut' | 'quadraticInOut' | 'cubicIn' | 'cubicOut' | 'cubicInOut' | 'quarticIn' | 'quarticOut' | 'quarticInOut' | 'quinticIn' | 'quinticOut' | 'quinticInOut' | 'sinusoidalIn' | 'sinusoidalOut' | 'sinusoidalInOut' | 'exponentialIn' | 'exponentialOut' | 'exponentialInOut' | 'circularIn' | 'circularOut' | 'circularInOut';
declare const Easings: {
    linear: (t: number, b: number, c: number, d: number) => number;
    quadraticIn: (t: number, b: number, c: number, d: number) => number;
    quadraticOut: (t: number, b: number, c: number, d: number) => number;
    quadraticInOut: (t: number, b: number, c: number, d: number) => number;
    cubicIn: (t: number, b: number, c: number, d: number) => number;
    cubicOut: (t: number, b: number, c: number, d: number) => number;
    cubicInOut: (t: number, b: number, c: number, d: number) => number;
    quarticIn: (t: number, b: number, c: number, d: number) => number;
    quarticOut: (t: number, b: number, c: number, d: number) => number;
    quarticInOut: (t: number, b: number, c: number, d: number) => number;
    quinticIn: (t: number, b: number, c: number, d: number) => number;
    quinticOut: (t: number, b: number, c: number, d: number) => number;
    quinticInOut: (t: number, b: number, c: number, d: number) => number;
    sinusoidalIn: (t: number, b: number, c: number, d: number) => number;
    sinusoidalOut: (t: number, b: number, c: number, d: number) => number;
    sinusoidalInOut: (t: number, b: number, c: number, d: number) => number;
    exponentialIn: (t: number, b: number, c: number, d: number) => number;
    exponentialOut: (t: number, b: number, c: number, d: number) => number;
    exponentialInOut: (t: number, b: number, c: number, d: number) => number;
    circularIn: (t: number, b: number, c: number, d: number) => number;
    circularOut: (t: number, b: number, c: number, d: number) => number;
    circularInOut: (t: number, b: number, c: number, d: number) => number;
    elasticIn: (t: number, b: number, c: number, d: number, a: number, p: number) => number;
    elasticOut: (t: number, b: number, c: number, d: number, a: number, p: number) => number;
    elasticBoth: (t: number, b: number, c: number, d: number, a: number, p: number) => number;
    backIn: (t: number, b: number, c: number, d: number, s: number) => number;
    backOut: (t: number, b: number, c: number, d: number, s: number) => number;
    backBoth: (t: number, b: number, c: number, d: number, s: number) => number;
    bounceIn: (t: number, b: number, c: number, d: number) => number;
    bounceOut: (t: number, b: number, c: number, d: number) => number;
    bounceBoth: (t: number, b: number, c: number, d: number) => number;
};
export default Easings;
